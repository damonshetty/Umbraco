@inherits UmbracoTemplatePage
@using System.Linq;
@using System.Configuration
@{
    Response.ContentType = "text/xml";
    Layout = "XMLMaster.cshtml";
}
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">
    @ListChildNodes(Umbraco.TypedContentAtRoot().First<IPublishedContent>())
</urlset>

@helper ListChildNodes(IPublishedContent startNode)
{


foreach (var node in startNode.Children.Where("hideInXmlSitemap == false"))
{
    if (node.TemplateId > 0)
    {
            <url>
                <loc> @GetUrlWithDomainPrefix(node.Url) </loc>
                <lastmod>@(string.Format("{0:s}+00:00", node.UpdateDate)) </lastmod>


              </url>
            }
    if (node.Level <= 100 && node.Children.Count() > 0)
    {
        @ListChildNodes(node)
            }
}
}
@functions {

    private static string GetUrlWithDomainPrefix(string url)
    {
        string WebsiteUrl = ConfigurationManager.AppSettings["WebsiteUrl"];

        if (url.StartsWith("/"))
            url = url.Substring(1);

        if (url.StartsWith("http://"))
        {
            url = url.Replace("http://", "https://");
        }

        var domainPrefix = WebsiteUrl; //string.Format("https://{0}/", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);

        if (url.StartsWith(domainPrefix))
            return url;
        else
            return domainPrefix + url;


        //if (url.StartsWith("/"))
        //    url = url.Substring(1);

        //var domainPrefix = string.Format("http://{0}/", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);

        //if (url.StartsWith(domainPrefix))
        //    return url;
        //else
        //    return domainPrefix + url;
    }
}