@inherits UmbracoTemplatePage<Search>
@using Examine.LuceneEngine.SearchCriteria
@using Umbraco.Core
@using Umbraco.Core.Models
@using Umbraco.Core.Services
@{
    Layout = "Master.cshtml";
}

<div class="col-xs-12">

    <!--Breadcrumb-->
    @Html.Partial("~/Views/Partials/_breadcrumb.cshtml")

    <!--Heading, Summary, Content-->
    @Html.Partial("~/Views/Partials/_HeadingSummaryContent.cshtml")

</div>

@*<form class="form-inline">
        <fieldset>
            <!-- Form Name -->
            <legend></legend>

            <!-- Search input-->
            <div class="form-group">
                <label for="searchinput">Search Input</label>
                <input id="searchinput" name="search" type="search" placeholder="enter search terms" class="form-control input-md" required="" value="@Request.QueryString["search"]">
            </div>

            <div class="form-group">
                <select id="selectoption" name="selectoption" class="form-control">
                    <option value="" @(Request.QueryString["selectoption"] == "" ? "selected=\"selected\"" : "")>optional select type</option>
                    <option value="contentpage" @(Request.QueryString["selectoption"] == "contentpage" ? "selected=\"selected\"" : "")>Pages</option>
                    <option value="file" @(Request.QueryString["selectoption"] == "file" ? "selected=\"selected\"" : "")>Documents</option>
                    <option value="image" @(Request.QueryString["selectoption"] == "image" ? "selected=\"selected\"" : "")>Images</option>
                    <option value="newsitem" @(Request.QueryString["selectoption"] == "newsitem" ? "selected=\"selected\"" : "")>News</option>
                </select>
            </div>

            <!-- Button -->
            <div class="form-group">
                <button id="singlebutton" name="singlebutton" class="btn btn-primary">Search</button>
            </div>

        </fieldset>
    </form>*@

<div class="col-xs-12">

    @{
        int count = 0;

        if (!string.IsNullOrEmpty(Request.QueryString["search"]))
        {
            //container for the searcher
            Examine.Providers.BaseSearchProvider Searcher = null;

            IEnumerable<SearchResult> SearchResults = null;

            //Get querystring
            var query = Request.QueryString["search"];

            //Fetching our SearchProvider by giving it the name of our searchprovider
            Searcher = Examine.ExamineManager.Instance.SearchProviderCollection["FrontEndWebsiteSearcher"];

            SearchResults = Searcher.Search(query, true).TakeWhile(x => x.Score > 0.02f).OrderByDescending(x => x.Score).OrderByDescending(x => x.Fields["updateDate"]);

            UmbracoHelper helper = new UmbracoHelper(UmbracoContext.Current);

            count = SearchResults.Count();

            <div class="container">

                <hgroup class="mb20">
                    <h2 class="lead"><strong id="count"></strong> results were found for the search for <strong>@Request.QueryString["search"]</strong></h2>
                </hgroup>


                @{
                    IPublishedContent media;

                    //iterate the results
                    foreach (var searchResult in SearchResults)
                    {
                        //Files - pdf, doc
                        if (searchResult.Fields["nodeTypeAlias"].ToString().ToLower() == "file")
                        {
                            try
                            {
                                //Need to check if this file is on a page
                                media = Umbraco.TypedMedia(searchResult.Id);

                                //Check if on a published page
                                if (ShouldIndex(searchResult.Id, helper))
                                {
                                    <article class="search-result row margin-top-20">
                                        <div class="col-xs-12 col-md-9">
                                            <h3 style="margin:0 0 10px;"><a href="@media.Url" target="_blank"> @searchResult.Fields["nodeName"]</a></h3>
                                            <p>@searchResult.Fields["updateDate"].AsDateTime().ToString("dd") @searchResult.Fields["updateDate"].AsDateTime().ToString("MMM") @searchResult.Fields["updateDate"].AsDateTime().ToString("yyyy")</p>
                                        </div>
                                    </article>

                                    <div class="col-xs-12 col-md-9" style="margin-left:-15px;">
                                        <hr style="border-top:2px solid;color:#4da6ff;" />
                                    </div>
                                }
                                else
                                {
                                    count--;
                                }
                            }
                            catch (Exception ex)
                            {
                                count--;
                            }

                        }
                        //Images jpg, png,
                        else if (searchResult.Fields["nodeTypeAlias"].ToString().ToLower() == "image")
                        {
                            try
                            {
                                media = Umbraco.TypedMedia(searchResult.Id);

                                <article class="search-result row margin-top-20">
                                    <div class="col-xs-12 col-md-3 thumbnail" style="margin-right:5px;">
                                        <a href="@Umbraco.TypedMedia(searchResult.Id).Url" title="@searchResult.Fields["nodeName"]" target="_blank">@Html.Raw("<img src =\"" + Umbraco.TypedMedia(searchResult.Id).Url + "\" alt = \"" + @searchResult.Fields["nodeName"] + "\" class=\"width-100\" />")</a>
                                    </div>

                                    <div class="col-xs-12 col-md-8">
                                        <h3 style="margin-top:0;"><a href="@Umbraco.TypedMedia(searchResult.Id).Url" title="@searchResult.Fields["nodeName"]" target="_blank">@searchResult.Fields["nodeName"]</a></h3>
                                        <a href="@Umbraco.TypedMedia(searchResult.Id).Url" type="button" class="btn btn-success pull-left" target="_blank" title="Link to image" style="margin-bottom:10px;">Link to image</a>
                                        <p style="clear:left;">@searchResult.Fields["updateDate"].AsDateTime().ToString("dd") @searchResult.Fields["updateDate"].AsDateTime().ToString("MMM") @searchResult.Fields["updateDate"].AsDateTime().ToString("yyyy")</p>
                                    </div>
                                </article>

                                <div class="col-xs-12 col-md-9" style="margin-left:-15px;">
                                    <hr style="border-top:2px solid;color:#4da6ff;" />
                                </div>

                            }
                            catch (Exception ex)
                            {

                            }

                        }
                        //Pages
                        else
                        {
                            try
                            {
                                <!--Metadata Image-->
                                if (searchResult.Fields.ContainsKey("metadataImage") && searchResult.Fields["metadataImage"].ToString().Length > 0)
                                {

                                    <article class="search-result row margin-top-20">

                                        <div class="col-xs-12 col-md-3 background-color-nhs-grey text-align-center">

                                            <img src="@Umbraco.TypedMedia(Umbraco.TypedContent(searchResult.Id).GetPropertyValue<string>("metadataImage")).Url" alt="@Umbraco.TypedContent(searchResult.Id).Name" />

                                        </div>

                                        <div class="col-xs-12 col-md-9">
                                            <h3 style="margin:0;"><a href="@Umbraco.NiceUrl(searchResult.Id)">@searchResult.Fields["nodeName"]</a></h3>

                                            @{
                                                if (searchResult.Fields.ContainsKey("summary"))
                                                {
                                                    try
                                                    {
                                                        @(searchResult.Fields["summary"].ToString().Substring(0, 500) + "...")
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        @(searchResult.Fields["summary"].ToString().Substring(0, searchResult.Fields["summary"].ToString().Length) + "...")
                                                    }
                                                }
                                            }

                                            <p style="margin:10px 0 10px 0;">@searchResult.Fields["updateDate"].AsDateTime().ToString("dd") @searchResult.Fields["updateDate"].AsDateTime().ToString("MMM") @searchResult.Fields["updateDate"].AsDateTime().ToString("yyyy")</p>

                                        </div>
                                    </article>
                                                }
                                                else
                                                {
                                                    <article class="search-result row margin-top-20">
                                                        <div class="col-xs-12">
                                                            <h3 style="margin:0;"><a href="@Umbraco.NiceUrl(searchResult.Id)">@searchResult.Fields["nodeName"]</a></h3>

                                                            @{
                                                                if (searchResult.Fields.ContainsKey("summary"))
                                                                {
                                                                    try
                                                                    {
                                                                        @(searchResult.Fields["summary"].ToString().Substring(0, 500) + "...")
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        @(searchResult.Fields["summary"].ToString().Substring(0, searchResult.Fields["summary"].ToString().Length) + "...")
                                                                    }
                                                                }
                                                            }

                                                            <p style="margin:10px 0 10px 0;">@searchResult.Fields["updateDate"].AsDateTime().ToString("dd") @searchResult.Fields["updateDate"].AsDateTime().ToString("MMM") @searchResult.Fields["updateDate"].AsDateTime().ToString("yyyy")</p>

                                                        </div>
                                                    </article>
                                                                            }

                                                                        }
                                                                        catch (Exception ex)
                                                                        {

                                                                        }

                                                                    }

                                                                }

                }
            </div>
                                                                }
                                                                <script>

                                                                    $(document).ready(function () {
                                                                        $('#count').html(@count);
                                                                    });

                                                                </script>
    }

</div>

@functions{

    private IRelationService _relationService;

    private bool IsPdf(int nodeId, UmbracoHelper helper)
    {
        _relationService = ApplicationContext.Current.Services.RelationService;

        var mediaItem = helper.TypedMedia(nodeId);

        // Not sure if every IPublishedContent has this property
        return mediaItem.HasProperty("umbracoExtension") && mediaItem.GetPropertyValue<string>("umbracoExtension") == "pdf" || mediaItem.GetPropertyValue<string>("umbracoExtension") == "docx";
    }

    private bool ShouldIndex(int nodeId, UmbracoHelper helper)
    {
        // Check if media item is PDF
        if (!IsPdf(nodeId, helper)) return false;

        // Check if if the PDF is in the Relations
        if (!_relationService.IsRelated(nodeId)) return false;

        // If any document with this PDF is published, add to index. If not, cancel
        var relations = _relationService.GetByChildId(nodeId);
        if (!AnyPublished(relations.Select(r => r.ParentId), helper)) return false;

        return true;
    }

    private static bool AnyPublished(IEnumerable<int> nodeIds, UmbracoHelper helper)
    {
        if (nodeIds.Select(id => helper.TypedContent(id)).Any(n => n != null)) return true;
        return false;
    }

}